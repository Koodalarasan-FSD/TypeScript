// TypeScript

// Learn TypeScript in 50 Minutes - Tutorial for Beginners-https://www.youtube.com/watch?v=WBPrJSw7yQA

/* This typescript file main.ts is manually created and written but main.js is generated by
compiling main.ts file in terminal by using command tsc main.ts and then runned the program
by using command node main.js in terminal */

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var message = "Hello World";
console.log(message);

var x = 10;
var y = 20;

var names = "Koodalarasan";
var sentence = "My name is ".concat(names, ", I am beginner to learn TypeScript");
console.log(sentence);

// Below two are syntaxes to declare/initialise an array with same datatype values
var list1 = [1, 2, 3];
var list2 = [1, 2, 3];

//Below syntax to declare an array with different datatypes values
var person1 = ["Koodal", 1998]; // Must write values respectively with datatypes written

// enum type
var Color;
(function (Color) {
    Color[Color["Red"] = 0] = "Red";
    Color[Color["Green"] = 1] = "Green";
    Color[Color["SkyBlue"] = 2] = "SkyBlue";
})(Color || (Color = {}));
;
var c = Color.Green;
console.log(c); // output will be 1 because of place of Green is 1

var persons;
(function (persons) {
    persons[persons["Tom"] = 5] = "Tom";
    persons[persons["Jerry"] = 6] = "Jerry";
    persons[persons["Spike"] = 7] = "Spike";
})(persons || (persons = {}));
;
var charcter = persons.Jerry;
console.log(charcter); // output will be 6 because of we declared place of tom as 5 and so it is.

// We can "any" type if we didn't know data type of some value or in it
var randomValue = 10;
randomValue = true;
randomValue = 'Codevolution'; //it didn't raised  any error by using same variable again because of "any" type used here.

// Below statements are correct
var a;
a = 10;
a = true;

// But Below statement b=true are not correct because we already initialised with value 20.
var b = 20;
// b=true  // By removing comment we can saw error line in b

// we can also assign multi data types for single variable like below
var multi;
multi = 20;
multi = true;

// function
function add(num1, num2) {
    if (num2)
        return num1 + num2;
    else
        return num1;
}
add(5, 10);
add(5);

function add2(num3, num4) {
    if (num4 === void 0) { num4 = 10; }
    if (num4)
        return num3 + num4;
    else
        return num3;
}
add2(5, 10);
add2(5);

function fullName(person) {
    console.log("".concat(person.firstName, " ").concat(person.lastName));
}
var p = {
    firstName: 'Bruce',
    lastName: 'Wayne'
};
fullName(p);

// class & Access Modifiers
var Employee = /** @class */ (function () {
    function Employee(name) {
        this.employeeName = name;
    }
    Employee.prototype.greet = function () {
        console.log("Good Morning ".concat(this.employeeName));
    };
    return Employee;
}());
var emp1 = new Employee("Vishwas");
console.log(emp1.employeeName);
emp1.greet();

// Inheritance
var Manager = /** @class */ (function (_super) {
    __extends(Manager, _super);
    function Manager(managerName) {
        return _super.call(this, managerName) || this;
    }
    Manager.prototype.delegateWork = function () {
        console.log("Manager delegating tasks");
    };
    return Manager;
}(Employee));
var m1 = new Manager('Bruce');
m1.delegateWork();
m1.greet();
console.log(m1.employeeName);
